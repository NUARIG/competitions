# avoid empty columns in output
# only included awarded column when there is an awarded submission
has_awarded_submissions = @submissions.any?(&:awarded)
column_offset = has_awarded_submissions ? 8 : 7

base_headers = ['Applicants',
                'Applicant Emails',
                'Submitter',
                'Submitter Email',
                'Submission Title',
                'State',
                'Last Updated',
                'Completed Reviews']
base_headers << 'Awarded' if has_awarded_submissions

question_headers  = []

@questions.each do |question|
  question_headers << (question.is_mandatory ? (question.text + ' (Required)') : question.text)
end

headers_row_2 = (base_headers + question_headers)

wb = xlsx_package.workbook

sheet_name = prepare_excel_worksheet_name(sheet_name: @grant.name)

header_style = wb.styles.add_style({b: true})
link_style   = wb.styles.add_style({fg_color: '0000FF', u: true})

wb.add_worksheet(name: sheet_name) do |sheet|
  sheet.add_row headers_row_2, :style => header_style

  response_column_widths = []

  @submissions.each_with_index do |submission, row_index|
    submitter = submission.submitter
    applicants = []
    emails = []
    submission.applicants.each do |applicant|
      applicants << sortable_full_name(applicant)
      emails << applicant.email
    end

    responses = submission.responses
    response_columns = []

    review_data = review_data(submission)
    reviews_completed = "#{review_data.completed_review_count} / #{review_data.assigned_review_count}"

    file_upload_links = {}
    question_index = 0
    @questions.map do |question|
      file_upload_info = []
      question_index += 1

      response = responses.to_a.detect { |response| response.grant_submission_question_id == question.id }

      if question.response_type == 'file_upload'
        if response.response_value.present?
          file_upload_links[question_index] = rails_blob_url(response.document, disposition: 'attachment')
          response_columns << response.response_value.to_s
        else
          response_columns << response.response_value.to_s
        end
      else
        response_columns << response.response_value
      end
      response_column_widths << 45
    end

    base_submission_info = [applicants.to_sentence(words_connector: '; '),  # A
                            emails.to_sentence,                             # B
                            sortable_full_name(submitter),                  # C
                            submitter.email,                                # D
                            submission.title,                               # E
                            submission.state,                               # F
                            submission.updated_at.to_s(:long_ordinal),      # G
                            reviews_completed]                              # H

    base_submission_info << t("boolean.yes_no.#{submission.awarded}") if has_awarded_submissions # I

    row = sheet.add_row(base_submission_info.concat(response_columns))      # I/J

    alphabet_array = ('A'..'ZZ').to_a
    file_upload_links.each do |column, link|
      sheet.add_hyperlink(:location => link,
                          :ref => "#{alphabet_array[column + column_offset]}#{row_index + 2}") # account for columns in lines 57-62 and header row
      row.cells[column + column_offset].style = link_style
    end
  end

  if has_awarded_submissions
    sheet.column_widths(30, 25, 45, 15, 25, 25, 25, 25, *response_column_widths)
  else
    sheet.column_widths(30, 25, 45, 15, 25, 25, 25, *response_column_widths)
  end

end
